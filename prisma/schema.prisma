generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Student {
  id         String    @id @default(uuid())
  firstName  String
  middleName String
  lastName   String
  phone      String?
  email      String?
  class      String
  grade      Int
  schoolId   String
  subscribed Boolean
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  payments   Payment[]
  school     School    @relation(fields: [schoolId], references: [id], onDelete: Cascade)
}

model Payment {
  id        String      @id @default(uuid())
  type      PaymentType
  amount    Int
  studentId String
  payerId   String
  paidAt    DateTime    @default(now())
  schoolId  String
  paidBy    BitUser     @relation(fields: [payerId], references: [id], onDelete: Cascade)
  school    School      @relation(fields: [schoolId], references: [id])
  student   Student     @relation(fields: [studentId], references: [id], onDelete: Cascade)
}

model School {
  id          String    @id @default(uuid())
  name        String
  email       String
  principalId String    @unique
  staffs      BitUser[] @relation("StaffOfSchool")
  payments    Payment[]
  principal   BitUser   @relation("PrincipalOfSchool", fields: [principalId], references: [id], onDelete: Cascade)
  students    Student[]
}

model BitUser {
  id                String    @id @default(uuid())
  firstName         String
  middleName        String
  email             String
  password          String
  lastName          String
  phone             String
  role              Role   @default(BASIC)
  schoolId          String?
  schoolAsStaff     School?   @relation("StaffOfSchool", fields: [schoolId], references: [id])
  payments          Payment[]
  schoolAsPrincipal School?   @relation("PrincipalOfSchool")
}

enum PaymentType {
  MONTHLY_FEE
  BUS_FEE
  OTHERS
}
enum Role {
  SUPER_ADMIN
  ADMIN
  STAFF
  BASIC
}
