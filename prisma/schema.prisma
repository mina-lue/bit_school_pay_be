generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Student {
  id String @id @default(uuid())
  firstName String 
  middleName String 
  lastName String
  phone String?
  email String?
  class String
  grade Int
  schoolId String
  school School @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  payments Payment[]
  subscribed Boolean
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Payment {
  id String @id @default(uuid())
  type PaymentType
  amount Int
  studentId String
  payerId String
  schoolId String 
  school School @relation(fields: [schoolId], references: [id]) 
  student Student @relation(fields: [studentId], references: [id], onDelete: Cascade)
  paidBy BitUser @relation(fields: [payerId], references: [id], onDelete: Cascade)
  paidAt DateTime @default(now())
}

enum PaymentType {
  MONTHLY_FEE
  BUS_FEE
  OTHERS
}

model School {
  id          String   @id @default(uuid())
  name        String
  email       String
  students    Student[]
  payments    Payment[]

  // Principal relation (one-to-one)
  principalId String   @unique
  principal   BitUser  @relation("PrincipalOfSchool", fields: [principalId], references: [id], onDelete: Cascade)

  // Staffs relation (one-to-many)
  staffs      BitUser[] @relation("StaffOfSchool")
}

model BitUser {
  id          String   @id @default(uuid())
  firstName   String
  middleName  String
  lastName    String
  email       String    @unique
  phone       String
  password    String
  payments    Payment[]

  // As staff of a school
  schoolId    String?
  schoolAsStaff School? @relation("StaffOfSchool", fields: [schoolId], references: [id])

  // As principal of a school
  schoolAsPrincipal School? @relation("PrincipalOfSchool")
}

